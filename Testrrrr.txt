// program → declaration-list
int x;
int main() {}

// declaration-list → declaration declaration-list | declaration
int a;
real b;
void main() {}

// declaration → var-declaration | fun-declaration
int a;
int sum() {}

// var-declaration → type-specifier ID ; | type-specifier ID [ Num ] ;
real y;
int list[10];

// type-specifier → int | real | void
int i;
real f;
void reset() {}

// fun-declaration → type-specifier ID ( params ) compound-stmt
int add(int a, int b) { return a + b; }

// params → param-list | ε
int noArgs() {}
int withArgs(int x) {}

// param-list → param param-list | param
int multi(int x, int y) {}

// param → type-specifier ID | type-specifier ID [ ]
int test(int n, real arr[]) {}

// compound-stmt → { local-declarations stmt-list }
int main() {
  int i;
  i = 5;
}

// local-declarations → var-declaration local-declarations | ε
int main() {
  int a;
  real b;
}

// stmt-list → statement stmt-list | ε
int main() {
  a = 5;
  return;
}

// statement → expression-statement | compound-statement | selection-statement | iteration-statement | return-statement
int main() {
  a = 5;
  { int b; b = 3; }
  if (a > 0) a = 1;
  while (a < 10) a = a + 1;
  return a;
}

// expression-statement → expression ; | ;
;
x = 5;

// selection-statement → if ( expression ) statement | if ( expression ) statement else statement
int x;
int main() {
  if (x > 0)
    x = x - 1;

  if (x > 0)
    x = x - 1;
  else
    x = 0;
}

// iteration-stmt → while ( expression ) statement
int x;
int main() {
  x = 0;
  while (x < 5)
    x = x + 1;
}

// return-stmt → return ; | return expression ;
return;
return x + y;

// expression → var = expression | simple-expression
x = y + 2;
x + 3;

// var → ID | ID [ expression ]
x;
arr[5];

// simple-expression → additive-expression relOp additive-expression | additive-expression
x + y;
a + b > c + d;

// relOp → <= | >= | < | > | != | ==
x <= 5;
x == y;

// additive-expression → term addOp additive-expression | term
a + b - c;

// term → factor mulOp term | factor
a * b / c;

// factor → ( expression ) | var | call | Num
(5 + x);
x;
f(3);
7;

// call → ID( args )
sum(5, x);

// args → args-list | ε
foo();
foo(x, 3);

// args-list → expression , args-list | expression
x, y + 1, z;
